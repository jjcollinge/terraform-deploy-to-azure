/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
/**
 * Defines values for ContainerNetworkProtocol.
 * Possible values include: 'TCP', 'UDP'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ContainerNetworkProtocol =
 * <ContainerNetworkProtocol>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var ContainerNetworkProtocol;
(function (ContainerNetworkProtocol) {
    ContainerNetworkProtocol["TCP"] = "TCP";
    ContainerNetworkProtocol["UDP"] = "UDP";
})(ContainerNetworkProtocol || (ContainerNetworkProtocol = {}));
/**
 * Defines values for ResourceIdentityType.
 * Possible values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
 * UserAssigned', 'None'
 * @readonly
 * @enum {string}
 */
export var ResourceIdentityType;
(function (ResourceIdentityType) {
    ResourceIdentityType["SystemAssigned"] = "SystemAssigned";
    ResourceIdentityType["UserAssigned"] = "UserAssigned";
    ResourceIdentityType["SystemAssignedUserAssigned"] = "SystemAssigned, UserAssigned";
    ResourceIdentityType["None"] = "None";
})(ResourceIdentityType || (ResourceIdentityType = {}));
/**
 * Defines values for ContainerGroupRestartPolicy.
 * Possible values include: 'Always', 'OnFailure', 'Never'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ContainerGroupRestartPolicy =
 * <ContainerGroupRestartPolicy>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var ContainerGroupRestartPolicy;
(function (ContainerGroupRestartPolicy) {
    ContainerGroupRestartPolicy["Always"] = "Always";
    ContainerGroupRestartPolicy["OnFailure"] = "OnFailure";
    ContainerGroupRestartPolicy["Never"] = "Never";
})(ContainerGroupRestartPolicy || (ContainerGroupRestartPolicy = {}));
/**
 * Defines values for ContainerGroupNetworkProtocol.
 * Possible values include: 'TCP', 'UDP'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ContainerGroupNetworkProtocol =
 * <ContainerGroupNetworkProtocol>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var ContainerGroupNetworkProtocol;
(function (ContainerGroupNetworkProtocol) {
    ContainerGroupNetworkProtocol["TCP"] = "TCP";
    ContainerGroupNetworkProtocol["UDP"] = "UDP";
})(ContainerGroupNetworkProtocol || (ContainerGroupNetworkProtocol = {}));
/**
 * Defines values for ContainerGroupIpAddressType.
 * Possible values include: 'Public', 'Private'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ContainerGroupIpAddressType =
 * <ContainerGroupIpAddressType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var ContainerGroupIpAddressType;
(function (ContainerGroupIpAddressType) {
    ContainerGroupIpAddressType["Public"] = "Public";
    ContainerGroupIpAddressType["Private"] = "Private";
})(ContainerGroupIpAddressType || (ContainerGroupIpAddressType = {}));
/**
 * Defines values for OperatingSystemTypes.
 * Possible values include: 'Windows', 'Linux'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: OperatingSystemTypes =
 * <OperatingSystemTypes>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var OperatingSystemTypes;
(function (OperatingSystemTypes) {
    OperatingSystemTypes["Windows"] = "Windows";
    OperatingSystemTypes["Linux"] = "Linux";
})(OperatingSystemTypes || (OperatingSystemTypes = {}));
/**
 * Defines values for LogAnalyticsLogType.
 * Possible values include: 'ContainerInsights', 'ContainerInstanceLogs'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: LogAnalyticsLogType =
 * <LogAnalyticsLogType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var LogAnalyticsLogType;
(function (LogAnalyticsLogType) {
    LogAnalyticsLogType["ContainerInsights"] = "ContainerInsights";
    LogAnalyticsLogType["ContainerInstanceLogs"] = "ContainerInstanceLogs";
})(LogAnalyticsLogType || (LogAnalyticsLogType = {}));
/**
 * Defines values for ContainerInstanceOperationsOrigin.
 * Possible values include: 'User', 'System'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ContainerInstanceOperationsOrigin =
 * <ContainerInstanceOperationsOrigin>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var ContainerInstanceOperationsOrigin;
(function (ContainerInstanceOperationsOrigin) {
    ContainerInstanceOperationsOrigin["User"] = "User";
    ContainerInstanceOperationsOrigin["System"] = "System";
})(ContainerInstanceOperationsOrigin || (ContainerInstanceOperationsOrigin = {}));
/**
 * Defines values for Scheme.
 * Possible values include: 'http', 'https'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Scheme = <Scheme>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var Scheme;
(function (Scheme) {
    Scheme["Http"] = "http";
    Scheme["Https"] = "https";
})(Scheme || (Scheme = {}));
//# sourceMappingURL=index.js.map
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "ms-rest-js";
import * as Mappers from "../models/roleDefinitionsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a RoleDefinitions. */
var RoleDefinitions = /** @class */ (function () {
    /**
     * Create a RoleDefinitions.
     * @param {AuthorizationManagementClientContext} client Reference to the service client.
     */
    function RoleDefinitions(client) {
        this.client = client;
    }
    RoleDefinitions.prototype.deleteMethod = function (scope, roleDefinitionId, options, callback) {
        return this.client.sendOperationRequest({
            scope: scope,
            roleDefinitionId: roleDefinitionId,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    RoleDefinitions.prototype.get = function (scope, roleDefinitionId, options, callback) {
        return this.client.sendOperationRequest({
            scope: scope,
            roleDefinitionId: roleDefinitionId,
            options: options
        }, getOperationSpec, callback);
    };
    RoleDefinitions.prototype.createOrUpdate = function (scope, roleDefinitionId, roleDefinition, options, callback) {
        return this.client.sendOperationRequest({
            scope: scope,
            roleDefinitionId: roleDefinitionId,
            roleDefinition: roleDefinition,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    RoleDefinitions.prototype.list = function (scope, options, callback) {
        return this.client.sendOperationRequest({
            scope: scope,
            options: options
        }, listOperationSpec, callback);
    };
    RoleDefinitions.prototype.getById = function (roleId, options, callback) {
        return this.client.sendOperationRequest({
            roleId: roleId,
            options: options
        }, getByIdOperationSpec, callback);
    };
    RoleDefinitions.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return RoleDefinitions;
}());
export { RoleDefinitions };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}",
    urlParameters: [
        Parameters.scope,
        Parameters.roleDefinitionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RoleDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}",
    urlParameters: [
        Parameters.scope,
        Parameters.roleDefinitionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RoleDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}",
    urlParameters: [
        Parameters.scope,
        Parameters.roleDefinitionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "roleDefinition",
        mapper: tslib_1.__assign({}, Mappers.RoleDefinition, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.RoleDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "{scope}/providers/Microsoft.Authorization/roleDefinitions",
    urlParameters: [
        Parameters.scope
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RoleDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getByIdOperationSpec = {
    httpMethod: "GET",
    path: "{roleId}",
    urlParameters: [
        Parameters.roleId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RoleDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RoleDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=roleDefinitions.js.map
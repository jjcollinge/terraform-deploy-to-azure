/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmResources = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for DeploymentMode.
     * Possible values include: 'Incremental', 'Complete'
     * @readonly
     * @enum {string}
     */
    var DeploymentMode;
    (function (DeploymentMode) {
        DeploymentMode["Incremental"] = "Incremental";
        DeploymentMode["Complete"] = "Complete";
    })(DeploymentMode || (DeploymentMode = {}));
    /**
     * Defines values for OnErrorDeploymentType.
     * Possible values include: 'LastSuccessful', 'SpecificDeployment'
     * @readonly
     * @enum {string}
     */
    var OnErrorDeploymentType;
    (function (OnErrorDeploymentType) {
        OnErrorDeploymentType["LastSuccessful"] = "LastSuccessful";
        OnErrorDeploymentType["SpecificDeployment"] = "SpecificDeployment";
    })(OnErrorDeploymentType || (OnErrorDeploymentType = {}));
    /**
     * Defines values for ResourceIdentityType.
     * Possible values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     * @readonly
     * @enum {string}
     */
    var ResourceIdentityType;
    (function (ResourceIdentityType) {
        ResourceIdentityType["SystemAssigned"] = "SystemAssigned";
        ResourceIdentityType["UserAssigned"] = "UserAssigned";
        ResourceIdentityType["SystemAssignedUserAssigned"] = "SystemAssigned, UserAssigned";
        ResourceIdentityType["None"] = "None";
    })(ResourceIdentityType || (ResourceIdentityType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get DeploymentMode () { return DeploymentMode; },
        get OnErrorDeploymentType () { return OnErrorDeploymentType; },
        get ResourceIdentityType () { return ResourceIdentityType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var DeploymentExtendedFilter = {
        serializedName: "DeploymentExtendedFilter",
        type: {
            name: "Composite",
            className: "DeploymentExtendedFilter",
            modelProperties: {
                provisioningState: {
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GenericResourceFilter = {
        serializedName: "GenericResourceFilter",
        type: {
            name: "Composite",
            className: "GenericResourceFilter",
            modelProperties: {
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                tagname: {
                    serializedName: "tagname",
                    type: {
                        name: "String"
                    }
                },
                tagvalue: {
                    serializedName: "tagvalue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceGroupFilter = {
        serializedName: "ResourceGroupFilter",
        type: {
            name: "Composite",
            className: "ResourceGroupFilter",
            modelProperties: {
                tagName: {
                    serializedName: "tagName",
                    type: {
                        name: "String"
                    }
                },
                tagValue: {
                    serializedName: "tagValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TemplateLink = {
        serializedName: "TemplateLink",
        type: {
            name: "Composite",
            className: "TemplateLink",
            modelProperties: {
                uri: {
                    required: true,
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                contentVersion: {
                    serializedName: "contentVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ParametersLink = {
        serializedName: "ParametersLink",
        type: {
            name: "Composite",
            className: "ParametersLink",
            modelProperties: {
                uri: {
                    required: true,
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                contentVersion: {
                    serializedName: "contentVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DebugSetting = {
        serializedName: "DebugSetting",
        type: {
            name: "Composite",
            className: "DebugSetting",
            modelProperties: {
                detailLevel: {
                    serializedName: "detailLevel",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OnErrorDeployment = {
        serializedName: "OnErrorDeployment",
        type: {
            name: "Composite",
            className: "OnErrorDeployment",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "LastSuccessful",
                            "SpecificDeployment"
                        ]
                    }
                },
                deploymentName: {
                    serializedName: "deploymentName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentProperties = {
        serializedName: "DeploymentProperties",
        type: {
            name: "Composite",
            className: "DeploymentProperties",
            modelProperties: {
                template: {
                    serializedName: "template",
                    type: {
                        name: "Object"
                    }
                },
                templateLink: {
                    serializedName: "templateLink",
                    type: {
                        name: "Composite",
                        className: "TemplateLink"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Object"
                    }
                },
                parametersLink: {
                    serializedName: "parametersLink",
                    type: {
                        name: "Composite",
                        className: "ParametersLink"
                    }
                },
                mode: {
                    required: true,
                    serializedName: "mode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Incremental",
                            "Complete"
                        ]
                    }
                },
                debugSetting: {
                    serializedName: "debugSetting",
                    type: {
                        name: "Composite",
                        className: "DebugSetting"
                    }
                },
                onErrorDeployment: {
                    serializedName: "onErrorDeployment",
                    type: {
                        name: "Composite",
                        className: "OnErrorDeployment"
                    }
                }
            }
        }
    };
    var Deployment = {
        serializedName: "Deployment",
        type: {
            name: "Composite",
            className: "Deployment",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DeploymentProperties"
                    }
                }
            }
        }
    };
    var DeploymentExportResult = {
        serializedName: "DeploymentExportResult",
        type: {
            name: "Composite",
            className: "DeploymentExportResult",
            modelProperties: {
                template: {
                    serializedName: "template",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var ResourceManagementErrorWithDetails = {
        serializedName: "ResourceManagementErrorWithDetails",
        type: {
            name: "Composite",
            className: "ResourceManagementErrorWithDetails",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    readOnly: true,
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceManagementErrorWithDetails"
                            }
                        }
                    }
                }
            }
        }
    };
    var AliasPathType = {
        serializedName: "AliasPathType",
        type: {
            name: "Composite",
            className: "AliasPathType",
            modelProperties: {
                path: {
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                },
                apiVersions: {
                    serializedName: "apiVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AliasType = {
        serializedName: "AliasType",
        type: {
            name: "Composite",
            className: "AliasType",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                paths: {
                    serializedName: "paths",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AliasPathType"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProviderResourceType = {
        serializedName: "ProviderResourceType",
        type: {
            name: "Composite",
            className: "ProviderResourceType",
            modelProperties: {
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                locations: {
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                aliases: {
                    serializedName: "aliases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AliasType"
                            }
                        }
                    }
                },
                apiVersions: {
                    serializedName: "apiVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Provider = {
        serializedName: "Provider",
        type: {
            name: "Composite",
            className: "Provider",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                namespace: {
                    serializedName: "namespace",
                    type: {
                        name: "String"
                    }
                },
                registrationState: {
                    readOnly: true,
                    serializedName: "registrationState",
                    type: {
                        name: "String"
                    }
                },
                resourceTypes: {
                    readOnly: true,
                    serializedName: "resourceTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProviderResourceType"
                            }
                        }
                    }
                }
            }
        }
    };
    var BasicDependency = {
        serializedName: "BasicDependency",
        type: {
            name: "Composite",
            className: "BasicDependency",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                resourceName: {
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Dependency = {
        serializedName: "Dependency",
        type: {
            name: "Composite",
            className: "Dependency",
            modelProperties: {
                dependsOn: {
                    serializedName: "dependsOn",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BasicDependency"
                            }
                        }
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                resourceName: {
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OnErrorDeploymentExtended = {
        serializedName: "OnErrorDeploymentExtended",
        type: {
            name: "Composite",
            className: "OnErrorDeploymentExtended",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "LastSuccessful",
                            "SpecificDeployment"
                        ]
                    }
                },
                deploymentName: {
                    serializedName: "deploymentName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentPropertiesExtended = {
        serializedName: "DeploymentPropertiesExtended",
        type: {
            name: "Composite",
            className: "DeploymentPropertiesExtended",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    readOnly: true,
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                outputs: {
                    serializedName: "outputs",
                    type: {
                        name: "Object"
                    }
                },
                providers: {
                    serializedName: "providers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Provider"
                            }
                        }
                    }
                },
                dependencies: {
                    serializedName: "dependencies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Dependency"
                            }
                        }
                    }
                },
                template: {
                    serializedName: "template",
                    type: {
                        name: "Object"
                    }
                },
                templateLink: {
                    serializedName: "templateLink",
                    type: {
                        name: "Composite",
                        className: "TemplateLink"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Object"
                    }
                },
                parametersLink: {
                    serializedName: "parametersLink",
                    type: {
                        name: "Composite",
                        className: "ParametersLink"
                    }
                },
                mode: {
                    serializedName: "mode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Incremental",
                            "Complete"
                        ]
                    }
                },
                debugSetting: {
                    serializedName: "debugSetting",
                    type: {
                        name: "Composite",
                        className: "DebugSetting"
                    }
                },
                onErrorDeployment: {
                    serializedName: "onErrorDeployment",
                    type: {
                        name: "Composite",
                        className: "OnErrorDeploymentExtended"
                    }
                }
            }
        }
    };
    var DeploymentValidateResult = {
        serializedName: "DeploymentValidateResult",
        type: {
            name: "Composite",
            className: "DeploymentValidateResult",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ResourceManagementErrorWithDetails"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DeploymentPropertiesExtended"
                    }
                }
            }
        }
    };
    var DeploymentExtended = {
        serializedName: "DeploymentExtended",
        type: {
            name: "Composite",
            className: "DeploymentExtended",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DeploymentPropertiesExtended"
                    }
                }
            }
        }
    };
    var Plan = {
        serializedName: "Plan",
        type: {
            name: "Composite",
            className: "Plan",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                product: {
                    serializedName: "product",
                    type: {
                        name: "String"
                    }
                },
                promotionCode: {
                    serializedName: "promotionCode",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                model: {
                    serializedName: "model",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IdentityUserAssignedIdentitiesValue = {
        serializedName: "Identity_userAssignedIdentitiesValue",
        type: {
            name: "Composite",
            className: "IdentityUserAssignedIdentitiesValue",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    readOnly: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Identity = {
        serializedName: "Identity",
        type: {
            name: "Composite",
            className: "Identity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SystemAssigned",
                            "UserAssigned",
                            "SystemAssigned, UserAssigned",
                            "None"
                        ]
                    }
                },
                userAssignedIdentities: {
                    serializedName: "userAssignedIdentities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "IdentityUserAssignedIdentitiesValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var GenericResource = {
        serializedName: "GenericResource",
        type: {
            name: "Composite",
            className: "GenericResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "Plan"
                    }
                }, properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }, kind: {
                    serializedName: "kind",
                    constraints: {
                        Pattern: /^[-\w\._,\(\)]+$/
                    },
                    type: {
                        name: "String"
                    }
                }, managedBy: {
                    serializedName: "managedBy",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "Identity"
                    }
                } })
        }
    };
    var ResourceGroupProperties = {
        serializedName: "ResourceGroupProperties",
        type: {
            name: "Composite",
            className: "ResourceGroupProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceGroup = {
        serializedName: "ResourceGroup",
        type: {
            name: "Composite",
            className: "ResourceGroup",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ResourceGroupProperties"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                managedBy: {
                    serializedName: "managedBy",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceGroupPatchable = {
        serializedName: "ResourceGroupPatchable",
        type: {
            name: "Composite",
            className: "ResourceGroupPatchable",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ResourceGroupProperties"
                    }
                },
                managedBy: {
                    serializedName: "managedBy",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourcesMoveInfo = {
        serializedName: "ResourcesMoveInfo",
        type: {
            name: "Composite",
            className: "ResourcesMoveInfo",
            modelProperties: {
                resources: {
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                targetResourceGroup: {
                    serializedName: "targetResourceGroup",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExportTemplateRequest = {
        serializedName: "ExportTemplateRequest",
        type: {
            name: "Composite",
            className: "ExportTemplateRequest",
            modelProperties: {
                resources: {
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                options: {
                    serializedName: "options",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagCount = {
        serializedName: "TagCount",
        type: {
            name: "Composite",
            className: "TagCount",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var TagValue = {
        serializedName: "TagValue",
        type: {
            name: "Composite",
            className: "TagValue",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                tagValue: {
                    serializedName: "tagValue",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Composite",
                        className: "TagCount"
                    }
                }
            }
        }
    };
    var TagDetails = {
        serializedName: "TagDetails",
        type: {
            name: "Composite",
            className: "TagDetails",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                tagName: {
                    serializedName: "tagName",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Composite",
                        className: "TagCount"
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TagValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var TargetResource = {
        serializedName: "TargetResource",
        type: {
            name: "Composite",
            className: "TargetResource",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resourceName: {
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                },
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HttpMessage = {
        serializedName: "HttpMessage",
        type: {
            name: "Composite",
            className: "HttpMessage",
            modelProperties: {
                content: {
                    serializedName: "content",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var DeploymentOperationProperties = {
        serializedName: "DeploymentOperationProperties",
        type: {
            name: "Composite",
            className: "DeploymentOperationProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                serviceRequestId: {
                    readOnly: true,
                    serializedName: "serviceRequestId",
                    type: {
                        name: "String"
                    }
                },
                statusCode: {
                    readOnly: true,
                    serializedName: "statusCode",
                    type: {
                        name: "String"
                    }
                },
                statusMessage: {
                    readOnly: true,
                    serializedName: "statusMessage",
                    type: {
                        name: "Object"
                    }
                },
                targetResource: {
                    readOnly: true,
                    serializedName: "targetResource",
                    type: {
                        name: "Composite",
                        className: "TargetResource"
                    }
                },
                request: {
                    readOnly: true,
                    serializedName: "request",
                    type: {
                        name: "Composite",
                        className: "HttpMessage"
                    }
                },
                response: {
                    readOnly: true,
                    serializedName: "response",
                    type: {
                        name: "Composite",
                        className: "HttpMessage"
                    }
                }
            }
        }
    };
    var DeploymentOperation = {
        serializedName: "DeploymentOperation",
        type: {
            name: "Composite",
            className: "DeploymentOperation",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                operationId: {
                    readOnly: true,
                    serializedName: "operationId",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DeploymentOperationProperties"
                    }
                }
            }
        }
    };
    var ResourceProviderOperationDisplayProperties = {
        serializedName: "ResourceProviderOperationDisplayProperties",
        type: {
            name: "Composite",
            className: "ResourceProviderOperationDisplayProperties",
            modelProperties: {
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubResource = {
        serializedName: "SubResource",
        type: {
            name: "Composite",
            className: "SubResource",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceGroupExportResult = {
        serializedName: "ResourceGroupExportResult",
        type: {
            name: "Composite",
            className: "ResourceGroupExportResult",
            modelProperties: {
                template: {
                    serializedName: "template",
                    type: {
                        name: "Object"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ResourceManagementErrorWithDetails"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentListResult = {
        serializedName: "DeploymentListResult",
        type: {
            name: "Composite",
            className: "DeploymentListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeploymentExtended"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProviderListResult = {
        serializedName: "ProviderListResult",
        type: {
            name: "Composite",
            className: "ProviderListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Provider"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceListResult = {
        serializedName: "ResourceListResult",
        type: {
            name: "Composite",
            className: "ResourceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GenericResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceGroupListResult = {
        serializedName: "ResourceGroupListResult",
        type: {
            name: "Composite",
            className: "ResourceGroupListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagsListResult = {
        serializedName: "TagsListResult",
        type: {
            name: "Composite",
            className: "TagsListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TagDetails"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentOperationsListResult = {
        serializedName: "DeploymentOperationsListResult",
        type: {
            name: "Composite",
            className: "DeploymentOperationsListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeploymentOperation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        DeploymentExtendedFilter: DeploymentExtendedFilter,
        GenericResourceFilter: GenericResourceFilter,
        ResourceGroupFilter: ResourceGroupFilter,
        TemplateLink: TemplateLink,
        ParametersLink: ParametersLink,
        DebugSetting: DebugSetting,
        OnErrorDeployment: OnErrorDeployment,
        DeploymentProperties: DeploymentProperties,
        Deployment: Deployment,
        DeploymentExportResult: DeploymentExportResult,
        ResourceManagementErrorWithDetails: ResourceManagementErrorWithDetails,
        AliasPathType: AliasPathType,
        AliasType: AliasType,
        ProviderResourceType: ProviderResourceType,
        Provider: Provider,
        BasicDependency: BasicDependency,
        Dependency: Dependency,
        OnErrorDeploymentExtended: OnErrorDeploymentExtended,
        DeploymentPropertiesExtended: DeploymentPropertiesExtended,
        DeploymentValidateResult: DeploymentValidateResult,
        DeploymentExtended: DeploymentExtended,
        Plan: Plan,
        Sku: Sku,
        IdentityUserAssignedIdentitiesValue: IdentityUserAssignedIdentitiesValue,
        Identity: Identity,
        Resource: Resource,
        GenericResource: GenericResource,
        ResourceGroupProperties: ResourceGroupProperties,
        ResourceGroup: ResourceGroup,
        ResourceGroupPatchable: ResourceGroupPatchable,
        ResourcesMoveInfo: ResourcesMoveInfo,
        ExportTemplateRequest: ExportTemplateRequest,
        TagCount: TagCount,
        TagValue: TagValue,
        TagDetails: TagDetails,
        TargetResource: TargetResource,
        HttpMessage: HttpMessage,
        DeploymentOperationProperties: DeploymentOperationProperties,
        DeploymentOperation: DeploymentOperation,
        ResourceProviderOperationDisplayProperties: ResourceProviderOperationDisplayProperties,
        SubResource: SubResource,
        ResourceGroupExportResult: ResourceGroupExportResult,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        OperationListResult: OperationListResult,
        DeploymentListResult: DeploymentListResult,
        ProviderListResult: ProviderListResult,
        ResourceListResult: ResourceListResult,
        ResourceGroupListResult: ResourceGroupListResult,
        TagsListResult: TagsListResult,
        DeploymentOperationsListResult: DeploymentOperationsListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var deploymentName = {
        parameterPath: "deploymentName",
        mapper: {
            required: true,
            serializedName: "deploymentName",
            constraints: {
                MaxLength: 64,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var operationId = {
        parameterPath: "operationId",
        mapper: {
            required: true,
            serializedName: "operationId",
            type: {
                name: "String"
            }
        }
    };
    var parentResourcePath = {
        parameterPath: "parentResourcePath",
        mapper: {
            required: true,
            serializedName: "parentResourcePath",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceId = {
        parameterPath: "resourceId",
        mapper: {
            required: true,
            serializedName: "resourceId",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            type: {
                name: "String"
            }
        }
    };
    var resourceProviderNamespace = {
        parameterPath: "resourceProviderNamespace",
        mapper: {
            required: true,
            serializedName: "resourceProviderNamespace",
            type: {
                name: "String"
            }
        }
    };
    var resourceType = {
        parameterPath: "resourceType",
        mapper: {
            required: true,
            serializedName: "resourceType",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var sourceResourceGroupName = {
        parameterPath: "sourceResourceGroupName",
        mapper: {
            required: true,
            serializedName: "sourceResourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var tagName = {
        parameterPath: "tagName",
        mapper: {
            required: true,
            serializedName: "tagName",
            type: {
                name: "String"
            }
        }
    };
    var tagValue = {
        parameterPath: "tagValue",
        mapper: {
            required: true,
            serializedName: "tagValue",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Resources/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        Deployment: Deployment,
        DeploymentProperties: DeploymentProperties,
        TemplateLink: TemplateLink,
        ParametersLink: ParametersLink,
        DebugSetting: DebugSetting,
        OnErrorDeployment: OnErrorDeployment,
        DeploymentExtended: DeploymentExtended,
        BaseResource: BaseResource,
        DeploymentPropertiesExtended: DeploymentPropertiesExtended,
        Provider: Provider,
        ProviderResourceType: ProviderResourceType,
        AliasType: AliasType,
        AliasPathType: AliasPathType,
        Dependency: Dependency,
        BasicDependency: BasicDependency,
        OnErrorDeploymentExtended: OnErrorDeploymentExtended,
        DeploymentValidateResult: DeploymentValidateResult,
        ResourceManagementErrorWithDetails: ResourceManagementErrorWithDetails,
        DeploymentExportResult: DeploymentExportResult,
        DeploymentListResult: DeploymentListResult,
        ResourceGroup: ResourceGroup,
        ResourceGroupProperties: ResourceGroupProperties,
        TagValue: TagValue,
        TagCount: TagCount,
        Resource: Resource,
        SubResource: SubResource,
        GenericResource: GenericResource,
        Plan: Plan,
        Sku: Sku,
        Identity: Identity,
        IdentityUserAssignedIdentitiesValue: IdentityUserAssignedIdentitiesValue
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Deployments. */
    var Deployments = /** @class */ (function () {
        /**
         * Create a Deployments.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function Deployments(client) {
            this.client = client;
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template
         * deployment removes the associated deployment operations. This is an asynchronous operation that
         * returns a status of 202 until the template deployment is successfully deleted. The Location
         * response header contains the URI that is used to obtain the status of the process. While the
         * process is running, a call to the URI in the Location header returns a status of 202. When the
         * process finishes, the URI in the Location header returns a status of 204 on success. If the
         * asynchronous request failed, the URI in the Location header returns an error-level status code.
         * @summary Deletes a deployment from the deployment history.
         * @param deploymentName The name of the deployment to delete.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Deployments.prototype.deleteAtSubscriptionScope = function (deploymentName$$1, options) {
            return this.beginDeleteAtSubscriptionScope(deploymentName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.checkExistenceAtSubscriptionScope = function (deploymentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName$$1,
                options: options
            }, checkExistenceAtSubscriptionScopeOperationSpec, callback);
        };
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @summary Deploys resources at subscription scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>
         */
        Deployments.prototype.createOrUpdateAtSubscriptionScope = function (deploymentName$$1, parameters, options) {
            return this.beginCreateOrUpdateAtSubscriptionScope(deploymentName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.getAtSubscriptionScope = function (deploymentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName$$1,
                options: options
            }, getAtSubscriptionScopeOperationSpec, callback);
        };
        Deployments.prototype.cancelAtSubscriptionScope = function (deploymentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName$$1,
                options: options
            }, cancelAtSubscriptionScopeOperationSpec, callback);
        };
        Deployments.prototype.validateAtSubscriptionScope = function (deploymentName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName$$1,
                parameters: parameters,
                options: options
            }, validateAtSubscriptionScopeOperationSpec, callback);
        };
        Deployments.prototype.exportTemplateAtSubscriptionScope = function (deploymentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName$$1,
                options: options
            }, exportTemplateAtSubscriptionScopeOperationSpec, callback);
        };
        Deployments.prototype.listAtSubscriptionScope = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAtSubscriptionScopeOperationSpec, callback);
        };
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template
         * deployment removes the associated deployment operations. Deleting a template deployment does not
         * affect the state of the resource group. This is an asynchronous operation that returns a status
         * of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running,
         * a call to the URI in the Location header returns a status of 202. When the process finishes, the
         * URI in the Location header returns a status of 204 on success. If the asynchronous request
         * failed, the URI in the Location header returns an error-level status code.
         * @summary Deletes a deployment from the deployment history.
         * @param resourceGroupName The name of the resource group with the deployment to delete. The name
         * is case insensitive.
         * @param deploymentName The name of the deployment to delete.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Deployments.prototype.deleteMethod = function (resourceGroupName$$1, deploymentName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, deploymentName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.checkExistence = function (resourceGroupName$$1, deploymentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                deploymentName: deploymentName$$1,
                options: options
            }, checkExistenceOperationSpec, callback);
        };
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @summary Deploys resources to a resource group.
         * @param resourceGroupName The name of the resource group to deploy the resources to. The name is
         * case insensitive. The resource group must already exist.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsCreateOrUpdateResponse>
         */
        Deployments.prototype.createOrUpdate = function (resourceGroupName$$1, deploymentName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, deploymentName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.get = function (resourceGroupName$$1, deploymentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                deploymentName: deploymentName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Deployments.prototype.cancel = function (resourceGroupName$$1, deploymentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                deploymentName: deploymentName$$1,
                options: options
            }, cancelOperationSpec, callback);
        };
        Deployments.prototype.validate = function (resourceGroupName$$1, deploymentName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                deploymentName: deploymentName$$1,
                parameters: parameters,
                options: options
            }, validateOperationSpec, callback);
        };
        Deployments.prototype.exportTemplate = function (resourceGroupName$$1, deploymentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                deploymentName: deploymentName$$1,
                options: options
            }, exportTemplateOperationSpec, callback);
        };
        Deployments.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template
         * deployment removes the associated deployment operations. This is an asynchronous operation that
         * returns a status of 202 until the template deployment is successfully deleted. The Location
         * response header contains the URI that is used to obtain the status of the process. While the
         * process is running, a call to the URI in the Location header returns a status of 202. When the
         * process finishes, the URI in the Location header returns a status of 204 on success. If the
         * asynchronous request failed, the URI in the Location header returns an error-level status code.
         * @summary Deletes a deployment from the deployment history.
         * @param deploymentName The name of the deployment to delete.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginDeleteAtSubscriptionScope = function (deploymentName$$1, options) {
            return this.client.sendLRORequest({
                deploymentName: deploymentName$$1,
                options: options
            }, beginDeleteAtSubscriptionScopeOperationSpec, options);
        };
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @summary Deploys resources at subscription scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginCreateOrUpdateAtSubscriptionScope = function (deploymentName$$1, parameters, options) {
            return this.client.sendLRORequest({
                deploymentName: deploymentName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateAtSubscriptionScopeOperationSpec, options);
        };
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template
         * deployment removes the associated deployment operations. Deleting a template deployment does not
         * affect the state of the resource group. This is an asynchronous operation that returns a status
         * of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running,
         * a call to the URI in the Location header returns a status of 202. When the process finishes, the
         * URI in the Location header returns a status of 204 on success. If the asynchronous request
         * failed, the URI in the Location header returns an error-level status code.
         * @summary Deletes a deployment from the deployment history.
         * @param resourceGroupName The name of the resource group with the deployment to delete. The name
         * is case insensitive.
         * @param deploymentName The name of the deployment to delete.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginDeleteMethod = function (resourceGroupName$$1, deploymentName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                deploymentName: deploymentName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @summary Deploys resources to a resource group.
         * @param resourceGroupName The name of the resource group to deploy the resources to. The name is
         * case insensitive. The resource group must already exist.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, deploymentName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                deploymentName: deploymentName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        Deployments.prototype.listAtSubscriptionScopeNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAtSubscriptionScopeNextOperationSpec, callback);
        };
        Deployments.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return Deployments;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var checkExistenceAtSubscriptionScopeOperationSpec = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getAtSubscriptionScopeOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentExtended
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var cancelAtSubscriptionScopeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        urlParameters: [
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var validateAtSubscriptionScopeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        urlParameters: [
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Deployment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentValidateResult
            },
            400: {
                bodyMapper: DeploymentValidateResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var exportTemplateAtSubscriptionScopeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        urlParameters: [
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentExportResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAtSubscriptionScopeOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            filter,
            top,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var checkExistenceOperationSpec = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentExtended
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var cancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var validateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Deployment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentValidateResult
            },
            400: {
                bodyMapper: DeploymentValidateResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var exportTemplateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentExportResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            top,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteAtSubscriptionScopeOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateAtSubscriptionScopeOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Deployment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentExtended
            },
            201: {
                bodyMapper: DeploymentExtended
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Deployment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentExtended
            },
            201: {
                bodyMapper: DeploymentExtended
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAtSubscriptionScopeNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        Provider: Provider,
        ProviderResourceType: ProviderResourceType,
        AliasType: AliasType,
        AliasPathType: AliasPathType,
        CloudError: CloudError,
        ProviderListResult: ProviderListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Providers. */
    var Providers = /** @class */ (function () {
        /**
         * Create a Providers.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function Providers(client) {
            this.client = client;
        }
        Providers.prototype.unregister = function (resourceProviderNamespace$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceProviderNamespace: resourceProviderNamespace$$1,
                options: options
            }, unregisterOperationSpec, callback);
        };
        Providers.prototype.register = function (resourceProviderNamespace$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceProviderNamespace: resourceProviderNamespace$$1,
                options: options
            }, registerOperationSpec, callback);
        };
        Providers.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Providers.prototype.get = function (resourceProviderNamespace$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceProviderNamespace: resourceProviderNamespace$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Providers.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Providers;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var unregisterOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister",
        urlParameters: [
            resourceProviderNamespace,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Provider
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var registerOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register",
        urlParameters: [
            resourceProviderNamespace,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Provider
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            top,
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProviderListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}",
        urlParameters: [
            resourceProviderNamespace,
            subscriptionId
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Provider
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProviderListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        ResourceListResult: ResourceListResult,
        GenericResource: GenericResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Plan: Plan,
        Sku: Sku,
        Identity: Identity,
        IdentityUserAssignedIdentitiesValue: IdentityUserAssignedIdentitiesValue,
        CloudError: CloudError,
        ResourcesMoveInfo: ResourcesMoveInfo,
        DeploymentExtended: DeploymentExtended,
        DeploymentPropertiesExtended: DeploymentPropertiesExtended,
        Provider: Provider,
        ProviderResourceType: ProviderResourceType,
        AliasType: AliasType,
        AliasPathType: AliasPathType,
        Dependency: Dependency,
        BasicDependency: BasicDependency,
        TemplateLink: TemplateLink,
        ParametersLink: ParametersLink,
        DebugSetting: DebugSetting,
        OnErrorDeploymentExtended: OnErrorDeploymentExtended,
        ResourceGroup: ResourceGroup,
        ResourceGroupProperties: ResourceGroupProperties,
        TagValue: TagValue,
        TagCount: TagCount,
        SubResource: SubResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Resources. */
    var Resources = /** @class */ (function () {
        /**
         * Create a Resources.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function Resources(client) {
            this.client = client;
        }
        Resources.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        /**
         * The resources to move must be in the same source resource group. The target resource group may
         * be in a different subscription. When moving resources, both the source group and the target
         * group are locked for the duration of the operation. Write and delete operations are blocked on
         * the groups until the move completes.
         * @summary Moves resources from one resource group to another resource group.
         * @param sourceResourceGroupName The name of the resource group containing the resources to move.
         * @param parameters Parameters for moving resources.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Resources.prototype.moveResources = function (sourceResourceGroupName$$1, parameters, options) {
            return this.beginMoveResources(sourceResourceGroupName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * This operation checks whether the specified resources can be moved to the target. The resources
         * to move must be in the same source resource group. The target resource group may be in a
         * different subscription. If validation succeeds, it returns HTTP response code 204 (no content).
         * If validation fails, it returns HTTP response code 409 (Conflict) with an error message.
         * Retrieve the URL in the Location header value to check the result of the long-running operation.
         * @summary Validates whether resources can be moved from one resource group to another resource
         * group.
         * @param sourceResourceGroupName The name of the resource group containing the resources to
         * validate for move.
         * @param parameters Parameters for moving resources.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Resources.prototype.validateMoveResources = function (sourceResourceGroupName$$1, parameters, options) {
            return this.beginValidateMoveResources(sourceResourceGroupName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Resources.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        Resources.prototype.checkExistence = function (resourceGroupName$$1, resourceProviderNamespace$$1, parentResourcePath$$1, resourceType$$1, resourceName$$1, apiVersion$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceProviderNamespace: resourceProviderNamespace$$1,
                parentResourcePath: parentResourcePath$$1,
                resourceType: resourceType$$1,
                resourceName: resourceName$$1,
                apiVersion: apiVersion$$1,
                options: options
            }, checkExistenceOperationSpec$1, callback);
        };
        /**
         * Deletes a resource.
         * @param resourceGroupName The name of the resource group that contains the resource to delete.
         * The name is case insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type.
         * @param resourceName The name of the resource to delete.
         * @param apiVersion The API version to use for the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Resources.prototype.deleteMethod = function (resourceGroupName$$1, resourceProviderNamespace$$1, parentResourcePath$$1, resourceType$$1, resourceName$$1, apiVersion$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, resourceProviderNamespace$$1, parentResourcePath$$1, resourceType$$1, resourceName$$1, apiVersion$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         * insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to create.
         * @param resourceName The name of the resource to create.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for creating or updating the resource.
         * @param [options] The optional parameters
         * @returns Promise<Models.ResourcesCreateOrUpdateResponse>
         */
        Resources.prototype.createOrUpdate = function (resourceGroupName$$1, resourceProviderNamespace$$1, parentResourcePath$$1, resourceType$$1, resourceName$$1, apiVersion$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, resourceProviderNamespace$$1, parentResourcePath$$1, resourceType$$1, resourceName$$1, apiVersion$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         * insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to update.
         * @param resourceName The name of the resource to update.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for updating the resource.
         * @param [options] The optional parameters
         * @returns Promise<Models.ResourcesUpdateResponse>
         */
        Resources.prototype.update = function (resourceGroupName$$1, resourceProviderNamespace$$1, parentResourcePath$$1, resourceType$$1, resourceName$$1, apiVersion$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, resourceProviderNamespace$$1, parentResourcePath$$1, resourceType$$1, resourceName$$1, apiVersion$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Resources.prototype.get = function (resourceGroupName$$1, resourceProviderNamespace$$1, parentResourcePath$$1, resourceType$$1, resourceName$$1, apiVersion$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceProviderNamespace: resourceProviderNamespace$$1,
                parentResourcePath: parentResourcePath$$1,
                resourceType: resourceType$$1,
                resourceName: resourceName$$1,
                apiVersion: apiVersion$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        Resources.prototype.checkExistenceById = function (resourceId$$1, apiVersion$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceId: resourceId$$1,
                apiVersion: apiVersion$$1,
                options: options
            }, checkExistenceByIdOperationSpec, callback);
        };
        /**
         * Deletes a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and
         * resource type. Use the format,
         * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Resources.prototype.deleteById = function (resourceId$$1, apiVersion$$1, options) {
            return this.beginDeleteById(resourceId$$1, apiVersion$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Create a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and
         * resource type. Use the format,
         * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Create or update resource parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.ResourcesCreateOrUpdateByIdResponse>
         */
        Resources.prototype.createOrUpdateById = function (resourceId$$1, apiVersion$$1, parameters, options) {
            return this.beginCreateOrUpdateById(resourceId$$1, apiVersion$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and
         * resource type. Use the format,
         * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Update resource parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.ResourcesUpdateByIdResponse>
         */
        Resources.prototype.updateById = function (resourceId$$1, apiVersion$$1, parameters, options) {
            return this.beginUpdateById(resourceId$$1, apiVersion$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Resources.prototype.getById = function (resourceId$$1, apiVersion$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceId: resourceId$$1,
                apiVersion: apiVersion$$1,
                options: options
            }, getByIdOperationSpec, callback);
        };
        /**
         * The resources to move must be in the same source resource group. The target resource group may
         * be in a different subscription. When moving resources, both the source group and the target
         * group are locked for the duration of the operation. Write and delete operations are blocked on
         * the groups until the move completes.
         * @summary Moves resources from one resource group to another resource group.
         * @param sourceResourceGroupName The name of the resource group containing the resources to move.
         * @param parameters Parameters for moving resources.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginMoveResources = function (sourceResourceGroupName$$1, parameters, options) {
            return this.client.sendLRORequest({
                sourceResourceGroupName: sourceResourceGroupName$$1,
                parameters: parameters,
                options: options
            }, beginMoveResourcesOperationSpec, options);
        };
        /**
         * This operation checks whether the specified resources can be moved to the target. The resources
         * to move must be in the same source resource group. The target resource group may be in a
         * different subscription. If validation succeeds, it returns HTTP response code 204 (no content).
         * If validation fails, it returns HTTP response code 409 (Conflict) with an error message.
         * Retrieve the URL in the Location header value to check the result of the long-running operation.
         * @summary Validates whether resources can be moved from one resource group to another resource
         * group.
         * @param sourceResourceGroupName The name of the resource group containing the resources to
         * validate for move.
         * @param parameters Parameters for moving resources.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginValidateMoveResources = function (sourceResourceGroupName$$1, parameters, options) {
            return this.client.sendLRORequest({
                sourceResourceGroupName: sourceResourceGroupName$$1,
                parameters: parameters,
                options: options
            }, beginValidateMoveResourcesOperationSpec, options);
        };
        /**
         * Deletes a resource.
         * @param resourceGroupName The name of the resource group that contains the resource to delete.
         * The name is case insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type.
         * @param resourceName The name of the resource to delete.
         * @param apiVersion The API version to use for the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginDeleteMethod = function (resourceGroupName$$1, resourceProviderNamespace$$1, parentResourcePath$$1, resourceType$$1, resourceName$$1, apiVersion$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceProviderNamespace: resourceProviderNamespace$$1,
                parentResourcePath: parentResourcePath$$1,
                resourceType: resourceType$$1,
                resourceName: resourceName$$1,
                apiVersion: apiVersion$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        /**
         * Creates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         * insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to create.
         * @param resourceName The name of the resource to create.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for creating or updating the resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, resourceProviderNamespace$$1, parentResourcePath$$1, resourceType$$1, resourceName$$1, apiVersion$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceProviderNamespace: resourceProviderNamespace$$1,
                parentResourcePath: parentResourcePath$$1,
                resourceType: resourceType$$1,
                resourceName: resourceName$$1,
                apiVersion: apiVersion$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Updates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         * insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to update.
         * @param resourceName The name of the resource to update.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for updating the resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginUpdate = function (resourceGroupName$$1, resourceProviderNamespace$$1, parentResourcePath$$1, resourceType$$1, resourceName$$1, apiVersion$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceProviderNamespace: resourceProviderNamespace$$1,
                parentResourcePath: parentResourcePath$$1,
                resourceType: resourceType$$1,
                resourceName: resourceName$$1,
                apiVersion: apiVersion$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Deletes a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and
         * resource type. Use the format,
         * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginDeleteById = function (resourceId$$1, apiVersion$$1, options) {
            return this.client.sendLRORequest({
                resourceId: resourceId$$1,
                apiVersion: apiVersion$$1,
                options: options
            }, beginDeleteByIdOperationSpec, options);
        };
        /**
         * Create a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and
         * resource type. Use the format,
         * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Create or update resource parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginCreateOrUpdateById = function (resourceId$$1, apiVersion$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceId: resourceId$$1,
                apiVersion: apiVersion$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateByIdOperationSpec, options);
        };
        /**
         * Updates a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and
         * resource type. Use the format,
         * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Update resource parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginUpdateById = function (resourceId$$1, apiVersion$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceId: resourceId$$1,
                apiVersion: apiVersion$$1,
                parameters: parameters,
                options: options
            }, beginUpdateByIdOperationSpec, options);
        };
        Resources.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        Resources.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return Resources;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            expand,
            top,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resources",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            filter,
            expand,
            top,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var checkExistenceOperationSpec$1 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GenericResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var checkExistenceByIdOperationSpec = {
        httpMethod: "HEAD",
        path: "{resourceId}",
        urlParameters: [
            resourceId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getByIdOperationSpec = {
        httpMethod: "GET",
        path: "{resourceId}",
        urlParameters: [
            resourceId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GenericResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginMoveResourcesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources",
        urlParameters: [
            sourceResourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ResourcesMoveInfo, { required: true })
        },
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginValidateMoveResourcesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/validateMoveResources",
        urlParameters: [
            sourceResourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ResourcesMoveInfo, { required: true })
        },
        responses: {
            202: {},
            204: {},
            409: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, GenericResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: GenericResource
            },
            201: {
                bodyMapper: GenericResource
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, GenericResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: GenericResource
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginDeleteByIdOperationSpec = {
        httpMethod: "DELETE",
        path: "{resourceId}",
        urlParameters: [
            resourceId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOrUpdateByIdOperationSpec = {
        httpMethod: "PUT",
        path: "{resourceId}",
        urlParameters: [
            resourceId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, GenericResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: GenericResource
            },
            201: {
                bodyMapper: GenericResource
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginUpdateByIdOperationSpec = {
        httpMethod: "PATCH",
        path: "{resourceId}",
        urlParameters: [
            resourceId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, GenericResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: GenericResource
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        ResourceGroup: ResourceGroup,
        BaseResource: BaseResource,
        ResourceGroupProperties: ResourceGroupProperties,
        ResourceGroupPatchable: ResourceGroupPatchable,
        ExportTemplateRequest: ExportTemplateRequest,
        ResourceGroupExportResult: ResourceGroupExportResult,
        ResourceManagementErrorWithDetails: ResourceManagementErrorWithDetails,
        ResourceGroupListResult: ResourceGroupListResult,
        DeploymentExtended: DeploymentExtended,
        DeploymentPropertiesExtended: DeploymentPropertiesExtended,
        Provider: Provider,
        ProviderResourceType: ProviderResourceType,
        AliasType: AliasType,
        AliasPathType: AliasPathType,
        Dependency: Dependency,
        BasicDependency: BasicDependency,
        TemplateLink: TemplateLink,
        ParametersLink: ParametersLink,
        DebugSetting: DebugSetting,
        OnErrorDeploymentExtended: OnErrorDeploymentExtended,
        TagValue: TagValue,
        TagCount: TagCount,
        Resource: Resource,
        SubResource: SubResource,
        GenericResource: GenericResource,
        Plan: Plan,
        Sku: Sku,
        Identity: Identity,
        IdentityUserAssignedIdentitiesValue: IdentityUserAssignedIdentitiesValue
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ResourceGroups. */
    var ResourceGroups = /** @class */ (function () {
        /**
         * Create a ResourceGroups.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function ResourceGroups(client) {
            this.client = client;
        }
        ResourceGroups.prototype.checkExistence = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, checkExistenceOperationSpec$2, callback);
        };
        ResourceGroups.prototype.createOrUpdate = function (resourceGroupName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        /**
         * When you delete a resource group, all of its resources are also deleted. Deleting a resource
         * group deletes all of its template deployments and currently stored operations.
         * @summary Deletes a resource group.
         * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ResourceGroups.prototype.deleteMethod = function (resourceGroupName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ResourceGroups.prototype.get = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        ResourceGroups.prototype.update = function (resourceGroupName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        ResourceGroups.prototype.exportTemplate = function (resourceGroupName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                parameters: parameters,
                options: options
            }, exportTemplateOperationSpec$1, callback);
        };
        ResourceGroups.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$3, callback);
        };
        /**
         * When you delete a resource group, all of its resources are also deleted. Deleting a resource
         * group deletes all of its template deployments and currently stored operations.
         * @summary Deletes a resource group.
         * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ResourceGroups.prototype.beginDeleteMethod = function (resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        ResourceGroups.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return ResourceGroups;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var checkExistenceOperationSpec$2 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ResourceGroup, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ResourceGroup
            },
            201: {
                bodyMapper: ResourceGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ResourceGroupPatchable, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ResourceGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var exportTemplateOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ExportTemplateRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ResourceGroupExportResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            filter,
            top,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        TagValue: TagValue,
        BaseResource: BaseResource,
        TagCount: TagCount,
        TagDetails: TagDetails,
        TagsListResult: TagsListResult,
        DeploymentExtended: DeploymentExtended,
        DeploymentPropertiesExtended: DeploymentPropertiesExtended,
        Provider: Provider,
        ProviderResourceType: ProviderResourceType,
        AliasType: AliasType,
        AliasPathType: AliasPathType,
        Dependency: Dependency,
        BasicDependency: BasicDependency,
        TemplateLink: TemplateLink,
        ParametersLink: ParametersLink,
        DebugSetting: DebugSetting,
        OnErrorDeploymentExtended: OnErrorDeploymentExtended,
        ResourceGroup: ResourceGroup,
        ResourceGroupProperties: ResourceGroupProperties,
        Resource: Resource,
        SubResource: SubResource,
        GenericResource: GenericResource,
        Plan: Plan,
        Sku: Sku,
        Identity: Identity,
        IdentityUserAssignedIdentitiesValue: IdentityUserAssignedIdentitiesValue
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Tags. */
    var Tags = /** @class */ (function () {
        /**
         * Create a Tags.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function Tags(client) {
            this.client = client;
        }
        Tags.prototype.deleteValue = function (tagName$$1, tagValue$$1, options, callback) {
            return this.client.sendOperationRequest({
                tagName: tagName$$1,
                tagValue: tagValue$$1,
                options: options
            }, deleteValueOperationSpec, callback);
        };
        Tags.prototype.createOrUpdateValue = function (tagName$$1, tagValue$$1, options, callback) {
            return this.client.sendOperationRequest({
                tagName: tagName$$1,
                tagValue: tagValue$$1,
                options: options
            }, createOrUpdateValueOperationSpec, callback);
        };
        Tags.prototype.createOrUpdate = function (tagName$$1, options, callback) {
            return this.client.sendOperationRequest({
                tagName: tagName$$1,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        Tags.prototype.deleteMethod = function (tagName$$1, options, callback) {
            return this.client.sendOperationRequest({
                tagName: tagName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Tags.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$4, callback);
        };
        Tags.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return Tags;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var deleteValueOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
        urlParameters: [
            tagName,
            tagValue,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var createOrUpdateValueOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
        urlParameters: [
            tagName,
            tagValue,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagValue
            },
            201: {
                bodyMapper: TagValue
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/tagNames/{tagName}",
        urlParameters: [
            tagName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagDetails
            },
            201: {
                bodyMapper: TagDetails
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/tagNames/{tagName}",
        urlParameters: [
            tagName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/tagNames",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        DeploymentOperation: DeploymentOperation,
        DeploymentOperationProperties: DeploymentOperationProperties,
        TargetResource: TargetResource,
        HttpMessage: HttpMessage,
        CloudError: CloudError,
        DeploymentOperationsListResult: DeploymentOperationsListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DeploymentOperations. */
    var DeploymentOperations = /** @class */ (function () {
        /**
         * Create a DeploymentOperations.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function DeploymentOperations(client) {
            this.client = client;
        }
        DeploymentOperations.prototype.getAtSubscriptionScope = function (deploymentName$$1, operationId$$1, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName$$1,
                operationId: operationId$$1,
                options: options
            }, getAtSubscriptionScopeOperationSpec$1, callback);
        };
        DeploymentOperations.prototype.listAtSubscriptionScope = function (deploymentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName$$1,
                options: options
            }, listAtSubscriptionScopeOperationSpec$1, callback);
        };
        DeploymentOperations.prototype.get = function (resourceGroupName$$1, deploymentName$$1, operationId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                deploymentName: deploymentName$$1,
                operationId: operationId$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        DeploymentOperations.prototype.list = function (resourceGroupName$$1, deploymentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                deploymentName: deploymentName$$1,
                options: options
            }, listOperationSpec$5, callback);
        };
        DeploymentOperations.prototype.listAtSubscriptionScopeNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAtSubscriptionScopeNextOperationSpec$1, callback);
        };
        DeploymentOperations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        return DeploymentOperations;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var getAtSubscriptionScopeOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
        urlParameters: [
            deploymentName,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentOperation
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listAtSubscriptionScopeOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
        urlParameters: [
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            top,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentOperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations/{operationId}",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentOperation
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [
            top,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentOperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listAtSubscriptionScopeNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentOperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentOperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-resources";
    var packageVersion = "1.0.0";
    var ResourceManagementClientContext = /** @class */ (function (_super) {
        __extends(ResourceManagementClientContext, _super);
        /**
         * Initializes a new instance of the ResourceManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The ID of the target subscription.
         * @param [options] The parameter options
         */
        function ResourceManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-05-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ResourceManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ResourceManagementClient = /** @class */ (function (_super) {
        __extends(ResourceManagementClient, _super);
        /**
         * Initializes a new instance of the ResourceManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The ID of the target subscription.
         * @param [options] The parameter options
         */
        function ResourceManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.deployments = new Deployments(_this);
            _this.providers = new Providers(_this);
            _this.resources = new Resources(_this);
            _this.resourceGroups = new ResourceGroups(_this);
            _this.tags = new Tags(_this);
            _this.deploymentOperations = new DeploymentOperations(_this);
            return _this;
        }
        return ResourceManagementClient;
    }(ResourceManagementClientContext));

    exports.ResourceManagementClient = ResourceManagementClient;
    exports.ResourceManagementClientContext = ResourceManagementClientContext;
    exports.ResourceManagementModels = index;
    exports.ResourceManagementMappers = mappers;
    exports.Operations = Operations;
    exports.Deployments = Deployments;
    exports.Providers = Providers;
    exports.Resources = Resources;
    exports.ResourceGroups = ResourceGroups;
    exports.Tags = Tags;
    exports.DeploymentOperations = DeploymentOperations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-resources.js.map

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "ms-rest-js";
import * as Mappers from "../models/resourcesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Resources. */
var Resources = /** @class */ (function () {
    /**
     * Create a Resources.
     * @param {ResourceManagementClientContext} client Reference to the service client.
     */
    function Resources(client) {
        this.client = client;
    }
    Resources.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    /**
     * The resources to move must be in the same source resource group. The target resource group may
     * be in a different subscription. When moving resources, both the source group and the target
     * group are locked for the duration of the operation. Write and delete operations are blocked on
     * the groups until the move completes.
     * @summary Moves resources from one resource group to another resource group.
     * @param sourceResourceGroupName The name of the resource group containing the resources to move.
     * @param parameters Parameters for moving resources.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Resources.prototype.moveResources = function (sourceResourceGroupName, parameters, options) {
        return this.beginMoveResources(sourceResourceGroupName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * This operation checks whether the specified resources can be moved to the target. The resources
     * to move must be in the same source resource group. The target resource group may be in a
     * different subscription. If validation succeeds, it returns HTTP response code 204 (no content).
     * If validation fails, it returns HTTP response code 409 (Conflict) with an error message.
     * Retrieve the URL in the Location header value to check the result of the long-running operation.
     * @summary Validates whether resources can be moved from one resource group to another resource
     * group.
     * @param sourceResourceGroupName The name of the resource group containing the resources to
     * validate for move.
     * @param parameters Parameters for moving resources.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Resources.prototype.validateMoveResources = function (sourceResourceGroupName, parameters, options) {
        return this.beginValidateMoveResources(sourceResourceGroupName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Resources.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    Resources.prototype.checkExistence = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceProviderNamespace: resourceProviderNamespace,
            parentResourcePath: parentResourcePath,
            resourceType: resourceType,
            resourceName: resourceName,
            apiVersion: apiVersion,
            options: options
        }, checkExistenceOperationSpec, callback);
    };
    /**
     * Deletes a resource.
     * @param resourceGroupName The name of the resource group that contains the resource to delete.
     * The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type.
     * @param resourceName The name of the resource to delete.
     * @param apiVersion The API version to use for the operation.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Resources.prototype.deleteMethod = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options) {
        return this.beginDeleteMethod(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Creates a resource.
     * @param resourceGroupName The name of the resource group for the resource. The name is case
     * insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource to create.
     * @param resourceName The name of the resource to create.
     * @param apiVersion The API version to use for the operation.
     * @param parameters Parameters for creating or updating the resource.
     * @param [options] The optional parameters
     * @returns Promise<Models.ResourcesCreateOrUpdateResponse>
     */
    Resources.prototype.createOrUpdate = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Updates a resource.
     * @param resourceGroupName The name of the resource group for the resource. The name is case
     * insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource to update.
     * @param resourceName The name of the resource to update.
     * @param apiVersion The API version to use for the operation.
     * @param parameters Parameters for updating the resource.
     * @param [options] The optional parameters
     * @returns Promise<Models.ResourcesUpdateResponse>
     */
    Resources.prototype.update = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options) {
        return this.beginUpdate(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Resources.prototype.get = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceProviderNamespace: resourceProviderNamespace,
            parentResourcePath: parentResourcePath,
            resourceType: resourceType,
            resourceName: resourceName,
            apiVersion: apiVersion,
            options: options
        }, getOperationSpec, callback);
    };
    Resources.prototype.checkExistenceById = function (resourceId, apiVersion, options, callback) {
        return this.client.sendOperationRequest({
            resourceId: resourceId,
            apiVersion: apiVersion,
            options: options
        }, checkExistenceByIdOperationSpec, callback);
    };
    /**
     * Deletes a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and
     * resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     * @param apiVersion The API version to use for the operation.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Resources.prototype.deleteById = function (resourceId, apiVersion, options) {
        return this.beginDeleteById(resourceId, apiVersion, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Create a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and
     * resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     * @param apiVersion The API version to use for the operation.
     * @param parameters Create or update resource parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.ResourcesCreateOrUpdateByIdResponse>
     */
    Resources.prototype.createOrUpdateById = function (resourceId, apiVersion, parameters, options) {
        return this.beginCreateOrUpdateById(resourceId, apiVersion, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Updates a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and
     * resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     * @param apiVersion The API version to use for the operation.
     * @param parameters Update resource parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.ResourcesUpdateByIdResponse>
     */
    Resources.prototype.updateById = function (resourceId, apiVersion, parameters, options) {
        return this.beginUpdateById(resourceId, apiVersion, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Resources.prototype.getById = function (resourceId, apiVersion, options, callback) {
        return this.client.sendOperationRequest({
            resourceId: resourceId,
            apiVersion: apiVersion,
            options: options
        }, getByIdOperationSpec, callback);
    };
    /**
     * The resources to move must be in the same source resource group. The target resource group may
     * be in a different subscription. When moving resources, both the source group and the target
     * group are locked for the duration of the operation. Write and delete operations are blocked on
     * the groups until the move completes.
     * @summary Moves resources from one resource group to another resource group.
     * @param sourceResourceGroupName The name of the resource group containing the resources to move.
     * @param parameters Parameters for moving resources.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Resources.prototype.beginMoveResources = function (sourceResourceGroupName, parameters, options) {
        return this.client.sendLRORequest({
            sourceResourceGroupName: sourceResourceGroupName,
            parameters: parameters,
            options: options
        }, beginMoveResourcesOperationSpec, options);
    };
    /**
     * This operation checks whether the specified resources can be moved to the target. The resources
     * to move must be in the same source resource group. The target resource group may be in a
     * different subscription. If validation succeeds, it returns HTTP response code 204 (no content).
     * If validation fails, it returns HTTP response code 409 (Conflict) with an error message.
     * Retrieve the URL in the Location header value to check the result of the long-running operation.
     * @summary Validates whether resources can be moved from one resource group to another resource
     * group.
     * @param sourceResourceGroupName The name of the resource group containing the resources to
     * validate for move.
     * @param parameters Parameters for moving resources.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Resources.prototype.beginValidateMoveResources = function (sourceResourceGroupName, parameters, options) {
        return this.client.sendLRORequest({
            sourceResourceGroupName: sourceResourceGroupName,
            parameters: parameters,
            options: options
        }, beginValidateMoveResourcesOperationSpec, options);
    };
    /**
     * Deletes a resource.
     * @param resourceGroupName The name of the resource group that contains the resource to delete.
     * The name is case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type.
     * @param resourceName The name of the resource to delete.
     * @param apiVersion The API version to use for the operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Resources.prototype.beginDeleteMethod = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            resourceProviderNamespace: resourceProviderNamespace,
            parentResourcePath: parentResourcePath,
            resourceType: resourceType,
            resourceName: resourceName,
            apiVersion: apiVersion,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Creates a resource.
     * @param resourceGroupName The name of the resource group for the resource. The name is case
     * insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource to create.
     * @param resourceName The name of the resource to create.
     * @param apiVersion The API version to use for the operation.
     * @param parameters Parameters for creating or updating the resource.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Resources.prototype.beginCreateOrUpdate = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            resourceProviderNamespace: resourceProviderNamespace,
            parentResourcePath: parentResourcePath,
            resourceType: resourceType,
            resourceName: resourceName,
            apiVersion: apiVersion,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Updates a resource.
     * @param resourceGroupName The name of the resource group for the resource. The name is case
     * insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource to update.
     * @param resourceName The name of the resource to update.
     * @param apiVersion The API version to use for the operation.
     * @param parameters Parameters for updating the resource.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Resources.prototype.beginUpdate = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            resourceProviderNamespace: resourceProviderNamespace,
            parentResourcePath: parentResourcePath,
            resourceType: resourceType,
            resourceName: resourceName,
            apiVersion: apiVersion,
            parameters: parameters,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Deletes a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and
     * resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     * @param apiVersion The API version to use for the operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Resources.prototype.beginDeleteById = function (resourceId, apiVersion, options) {
        return this.client.sendLRORequest({
            resourceId: resourceId,
            apiVersion: apiVersion,
            options: options
        }, beginDeleteByIdOperationSpec, options);
    };
    /**
     * Create a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and
     * resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     * @param apiVersion The API version to use for the operation.
     * @param parameters Create or update resource parameters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Resources.prototype.beginCreateOrUpdateById = function (resourceId, apiVersion, parameters, options) {
        return this.client.sendLRORequest({
            resourceId: resourceId,
            apiVersion: apiVersion,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateByIdOperationSpec, options);
    };
    /**
     * Updates a resource by ID.
     * @param resourceId The fully qualified ID of the resource, including the resource name and
     * resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     * @param apiVersion The API version to use for the operation.
     * @param parameters Update resource parameters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Resources.prototype.beginUpdateById = function (resourceId, apiVersion, parameters, options) {
        return this.client.sendLRORequest({
            resourceId: resourceId,
            apiVersion: apiVersion,
            parameters: parameters,
            options: options
        }, beginUpdateByIdOperationSpec, options);
    };
    Resources.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    Resources.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return Resources;
}());
export { Resources };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.expand,
        Parameters.top,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resources",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.expand,
        Parameters.top,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var checkExistenceOperationSpec = {
    httpMethod: "HEAD",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.resourceProviderNamespace,
        Parameters.parentResourcePath,
        Parameters.resourceType,
        Parameters.resourceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.resourceProviderNamespace,
        Parameters.parentResourcePath,
        Parameters.resourceType,
        Parameters.resourceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.GenericResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var checkExistenceByIdOperationSpec = {
    httpMethod: "HEAD",
    path: "{resourceId}",
    urlParameters: [
        Parameters.resourceId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getByIdOperationSpec = {
    httpMethod: "GET",
    path: "{resourceId}",
    urlParameters: [
        Parameters.resourceId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.GenericResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginMoveResourcesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources",
    urlParameters: [
        Parameters.sourceResourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ResourcesMoveInfo, { required: true })
    },
    responses: {
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginValidateMoveResourcesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/validateMoveResources",
    urlParameters: [
        Parameters.sourceResourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ResourcesMoveInfo, { required: true })
    },
    responses: {
        202: {},
        204: {},
        409: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.resourceProviderNamespace,
        Parameters.parentResourcePath,
        Parameters.resourceType,
        Parameters.resourceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.resourceProviderNamespace,
        Parameters.parentResourcePath,
        Parameters.resourceType,
        Parameters.resourceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.GenericResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.GenericResource
        },
        201: {
            bodyMapper: Mappers.GenericResource
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.resourceProviderNamespace,
        Parameters.parentResourcePath,
        Parameters.resourceType,
        Parameters.resourceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.GenericResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.GenericResource
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteByIdOperationSpec = {
    httpMethod: "DELETE",
    path: "{resourceId}",
    urlParameters: [
        Parameters.resourceId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateByIdOperationSpec = {
    httpMethod: "PUT",
    path: "{resourceId}",
    urlParameters: [
        Parameters.resourceId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.GenericResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.GenericResource
        },
        201: {
            bodyMapper: Mappers.GenericResource
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateByIdOperationSpec = {
    httpMethod: "PATCH",
    path: "{resourceId}",
    urlParameters: [
        Parameters.resourceId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.GenericResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.GenericResource
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=resources.js.map
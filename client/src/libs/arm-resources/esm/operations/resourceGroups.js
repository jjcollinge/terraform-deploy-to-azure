/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "ms-rest-js";
import * as Mappers from "../models/resourceGroupsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a ResourceGroups. */
var ResourceGroups = /** @class */ (function () {
    /**
     * Create a ResourceGroups.
     * @param {ResourceManagementClientContext} client Reference to the service client.
     */
    function ResourceGroups(client) {
        this.client = client;
    }
    ResourceGroups.prototype.checkExistence = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, checkExistenceOperationSpec, callback);
    };
    ResourceGroups.prototype.createOrUpdate = function (resourceGroupName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            parameters: parameters,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    /**
     * When you delete a resource group, all of its resources are also deleted. Deleting a resource
     * group deletes all of its template deployments and currently stored operations.
     * @summary Deletes a resource group.
     * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    ResourceGroups.prototype.deleteMethod = function (resourceGroupName, options) {
        return this.beginDeleteMethod(resourceGroupName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    ResourceGroups.prototype.get = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, getOperationSpec, callback);
    };
    ResourceGroups.prototype.update = function (resourceGroupName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            parameters: parameters,
            options: options
        }, updateOperationSpec, callback);
    };
    ResourceGroups.prototype.exportTemplate = function (resourceGroupName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            parameters: parameters,
            options: options
        }, exportTemplateOperationSpec, callback);
    };
    ResourceGroups.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    /**
     * When you delete a resource group, all of its resources are also deleted. Deleting a resource
     * group deletes all of its template deployments and currently stored operations.
     * @summary Deletes a resource group.
     * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ResourceGroups.prototype.beginDeleteMethod = function (resourceGroupName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    ResourceGroups.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return ResourceGroups;
}());
export { ResourceGroups };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var checkExistenceOperationSpec = {
    httpMethod: "HEAD",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ResourceGroup, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGroup
        },
        201: {
            bodyMapper: Mappers.ResourceGroup
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGroup
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ResourceGroupPatchable, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGroup
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var exportTemplateOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ExportTemplateRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGroupExportResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourcegroups",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.top,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGroupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGroupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=resourceGroups.js.map